<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Awei</title>
    <link>https://wangwei9160.github.io/</link>
    <description>Recent content on Awei</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Mon, 01 Mar 2021 11:53:30 +0800</lastBuildDate>
    
        <atom:link href="https://wangwei9160.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Word</title>
      <link>https://wangwei9160.github.io/post/word/</link>
      <pubDate>Mon, 01 Mar 2021 11:53:30 +0800</pubDate>
      
      <guid>https://wangwei9160.github.io/post/word/</guid>
      
        <description>&lt;h1 id=&#34;英语单词-or-小短文&#34;&gt;英语单词 or 小短文&lt;/h1&gt;
&lt;h3 id=&#34;210301&#34;&gt;21.03.01&lt;/h3&gt;
</description>
      
    </item>
    
    <item>
      <title>STL</title>
      <link>https://wangwei9160.github.io/post/stl/</link>
      <pubDate>Sun, 28 Feb 2021 17:47:04 +0800</pubDate>
      
      <guid>https://wangwei9160.github.io/post/stl/</guid>
      
        <description>&lt;h1 id=&#34;自己的轻量级stl库&#34;&gt;自己的轻量级STL库&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;只实现部分STL库文件，增加对STL库的理解。会逐步进行完善。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;size_t ： 定义在cstdef头文件中，是一个与机器相关的unsigned类型，其大小足以存储内存中对象的大小。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;顺序容器vectordequelistforward_listarraystring&#34;&gt;顺序容器：vector,deque,list,forward_list,array,string&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;string和vector。由于元素是连续存储的，由元素的下标来计算其地址是非常快的。为保持连续存储，添加一个元素可能要分配额外的存储空间。&lt;/li&gt;
&lt;li&gt;list和forward_list。是令容器任何位置的添加和删除操作都很快速。作为代价，这两个容器不支持元素的随机访问：为访问一个元素，只能遍历整个容器。与vector,deque,array相比，这两个容器的额外内存开销也很大。&lt;/li&gt;
&lt;li&gt;deque。与vector和string类似，deque支持快速的随机访问，中间位置添加或删除元素的代价很大。但是，两端添加或删除元素很快，与list和forward_list的速度相当。&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;顺序容器&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;功能&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;vector&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;可变大小数组。支持快速随机访问。在尾部之外的位置插入或删除元素可能很慢。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;deque&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;双端队列。支持快速随机访问。在头尾位置插入/伤处速度很快。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;list&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;双向链表。只支持双向顺序访问。在list中任何位置进行插入/删除操作速度都很快。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;forward_list&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;单向链表。只支持单向顺序访问。在链表中任何位置进行插入/删除操作速度都很快。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;array&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;固定大小数组。支持快速随机访问。不能添加或删除元素。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;string&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;与vector相似的容器，但专门用于保存字符。随机访问快。在尾部插入/删除速度快。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;h2 id=&#34;allocator&#34;&gt;allocator&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;标准库allocator类定义在头文件memory中，它帮助我们将内存分配和独享构造分离开来。提供一种类型感知的内存分配方法，它分配的内存是原始的、未构造的。&lt;/li&gt;
&lt;li&gt;当一个allocator对象分配内存时，allocator会根据给定的对象类型来确定恰当的内存大小和对齐位置：
&lt;blockquote&gt;
&lt;p&gt;allocator&lt;!-- raw HTML omitted --&gt; alloc;            //可以分配string的allocator对象
auto const p = alloc.allocate(n);   //分配n个未初始化的string&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;写法&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;解释&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;allocator &amp;lt; T &amp;gt; a&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;定义了一个名为a的allocator对象，为类型T的对象分配内存&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;a.allocate(n)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;分配一段原始的、未构造的内存，保存n个类型为T的对象&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;a.deallocate(p,n)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;释放从T*指针p中地址开始的内存，这块内存保存了n个类为T的对象；T必须是一个先前由allocate返回的指针，n必须是p创建时所要求的大小。在调用之前必须对每个这块内存中创建的对象调用destory&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;a.construct(p,args)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;T*类型指针p，指向原始内存，arg被传递给类型为T的构造函数，用来构造一个对象&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;a.destroy(p)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;T*类型指针p，对p指向的对象进行析构函数&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;blockquote&gt;
&lt;p&gt;allocator&lt;!-- raw HTML omitted --&gt; alloc;         &lt;br&gt;
auto const p = alloc.allocate(n);&lt;br&gt;
auto q = p ;                      // q指向最后构造的元素之后的位置&lt;br&gt;
alloc.construct(q++);             // *q为空字符串  &lt;br&gt;
alloc.construct(q++, 10 , &amp;lsquo;c&amp;rsquo;);   //*q为cccccccccc&lt;br&gt;
alloc.construct(q++ , &amp;ldquo;hi&amp;rdquo; ) ;    //*q为hi!&lt;br&gt;
while (q != p)  alloc.destory(&amp;ndash;q); // 释放真正构造的string
alloc.deallocator(p,n);&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;预计自己写的allocator类&#34;&gt;预计自己写的allocator类&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;函数&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;大体思路&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;allocate&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;默认生成一个&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;allocate(n)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;生成多个,n&amp;gt;=0,特判0的情况&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;dellocate(p)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;默认释放一个&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;dellocate(p,n)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;如标准类&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;construct(p)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;构造一个默认为空的&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;construct(p,T&amp;amp;)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;创建一个对象，方式是调用T的有参构造函数，参数为传过来的值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;construct(p,T)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;创建一个对象，方式是调用T的有参构造函数，参数为传过来的值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;construct(p,Args)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;带参数列表的构造&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;destroy(p)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;对p所指的对象进行析构函数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;destroy(p,n)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;对p所指的对象进行析构函数&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</description>
      
    </item>
    
    <item>
      <title>codeforces</title>
      <link>https://wangwei9160.github.io/post/codeforces634/</link>
      <pubDate>Wed, 15 Apr 2020 01:00:00 +0800</pubDate>
      
      <guid>https://wangwei9160.github.io/post/codeforces634/</guid>
      
        <description>&lt;h1 id=&#34;codeforces&#34;&gt;codeforces&lt;/h1&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt;目录&lt;!-- raw HTML omitted --&gt;&lt;br&gt;
&lt;!-- raw HTML omitted --&gt;A. Candies and Two Sisters&lt;!-- raw HTML omitted --&gt;&lt;br&gt;
&lt;!-- raw HTML omitted --&gt;B. Construct the String&lt;!-- raw HTML omitted --&gt;&lt;br&gt;
&lt;!-- raw HTML omitted --&gt;C. Two Teams Composing&lt;!-- raw HTML omitted --&gt;&lt;br&gt;
&lt;!-- raw HTML omitted --&gt;D. Anti-Sudoku&lt;!-- raw HTML omitted --&gt;&lt;br&gt;
&lt;!-- raw HTML omitted --&gt;E. Three Blocks Palindrome&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;h4 id=&#34;a-idaa-candies-and-two-sistersa&#34;&gt;&lt;!-- raw HTML omitted --&gt;A. Candies and Two Sisters&lt;!-- raw HTML omitted --&gt;&lt;/h4&gt;
&lt;h5 id=&#34;题目&#34;&gt;题目：&lt;/h5&gt;
&lt;p&gt;There are two sisters Alice and Betty. You have n candies. You want to distribute these n candies between two sisters in such a way that:&lt;br&gt;
lice will get a (a&amp;gt;0) candies;
Betty will get b (b&amp;gt;0) candies;
each sister will get some integer number of candies;
Alice will get a greater amount of candies than Betty (i.e. a&amp;gt;b);
all the candies will be given to one of two sisters (i.e. a+b=n).
Your task is to calculate the number of ways to distribute exactly n candies between sisters in a way described above. Candies are indistinguishable.&lt;br&gt;
Formally, find the number of ways to represent n as the sum of n=a+b, where a and b are positive integers and a&amp;gt;b&amp;hellip;
You have to answer t independent test cases.&lt;/p&gt;
&lt;h4 id=&#34;题意&#34;&gt;题意：&lt;/h4&gt;
&lt;p&gt;The answer is (n-1)/2&lt;/p&gt;
&lt;h4 id=&#34;代码&#34;&gt;代码：&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
using namespace std;
int main() {
	int t;
	cin &amp;gt;&amp;gt; t;
	while (t--) {
		int n;cin &amp;gt;&amp;gt; n;
		cout &amp;lt;&amp;lt; (n - 1) / 2 &amp;lt;&amp;lt; endl;
	}
	return 0;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;!-- raw HTML omitted --&gt;返回目录&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt;B. Construct the String&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;h4 id=&#34;题目-1&#34;&gt;题目：&lt;/h4&gt;
&lt;p&gt;You are given three positive integers n, a and b. You have to construct a string s of length n consisting of lowercase Latin letters such that each substring of length a has exactly b distinct letters. It is guaranteed that the answer exists.&lt;br&gt;
You have to answer t independent test cases.&lt;br&gt;
Recall that the substring s[l…r] is the string $s_l$,$s_{l+1}$,…,$s_r$ and its length is r?l+1. In this problem you are only interested in substrings of length a.&lt;/p&gt;
&lt;h4 id=&#34;题意-1&#34;&gt;题意：&lt;/h4&gt;
&lt;p&gt;There is no substring containing more than b distinct characters and each substring of length a contains exactly b distinct characters because of the condition b?a.&lt;/p&gt;
&lt;h4 id=&#34;代码-1&#34;&gt;代码：&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
using namespace std;
int main() {
	int t;
	cin &amp;gt;&amp;gt; t;
	while (t--) {
		int n, a, b;
		cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; a &amp;gt;&amp;gt; b;
        string ans=&amp;quot;&amp;quot;;int k=0;
		for (int i = 0; i &amp;lt; n; ++i) {
			ans += &#39;a&#39;+k;
            k = (k+1)%b;
		}
        cout &amp;lt;&amp;lt; ans &amp;lt;&amp;lt; endl;
	}
	return 0;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;!-- raw HTML omitted --&gt;返回目录&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt;C. Two Teams Composing&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;h4 id=&#34;题目-2&#34;&gt;题目：&lt;/h4&gt;
&lt;p&gt;You have n students under your control and you have to compose exactly two teams consisting of some subset of your students. Each student had his own skill, the i-th student skill is denoted by an integer ai (different students can have the same skills).&lt;br&gt;
So, about the teams. Firstly, these two teams should have the same size. Two more constraints:&lt;br&gt;
The first team should consist of students with distinct skills (i.e. all skills in the first team are unique). &lt;br&gt;
The second team should consist of students with the same skills (i.e. all skills in the second team are equal).&lt;br&gt;
Note that it is permissible that some student of the first team has the same skill as a student of the second team.
Consider some examples (skills are given): &lt;br&gt;
[1,2,3], [4,4] is not a good pair of teams because sizes should be the same;&lt;br&gt;
[1,1,2], [3,3,3] is not a good pair of teams because the first team should not contain students with the same skills;&lt;br&gt;
[1,2,3], [3,4,4] is not a good pair of teams because the second team should contain students with the same skills;&lt;br&gt;
[1,2,3], [3,3,3] is a good pair of teams;&lt;br&gt;
[5], [6] is a good pair of teams.&lt;br&gt;
Your task is to find the maximum possible size x for which it is possible to compose a valid pair of teams, where each team size is x (skills in the first team needed to be unique, skills in the second team should be the same between them). A student cannot be part of more than one team.&lt;br&gt;
You have to answer t independent test cases.&lt;/p&gt;
&lt;h4 id=&#34;题意-2&#34;&gt;题意：&lt;/h4&gt;
&lt;p&gt;The number of different skills is diff.The number of skill i is $cnt_i$ .&lt;br&gt;
maxcnt = max($cnt_1$,$cnt_2$,…,$cnt_n$).&lt;br&gt;
The answer is max( min(diff?1,maxcnt) , min(diff,maxcnt?1) ).&lt;/p&gt;
&lt;h4 id=&#34;代码-2&#34;&gt;代码：&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
using namespace std;
int main() {
	int t;
	cin &amp;gt;&amp;gt; t;
	while (t--) {
		int n;
		cin &amp;gt;&amp;gt; n;
		vector&amp;lt;int&amp;gt; cnt(n + 1);
		for (int i = 0; i &amp;lt; n; ++i) {
			int x;
			cin &amp;gt;&amp;gt; x;
			++cnt[x];
		}
		int mx = *max_element(cnt.begin(), cnt.end());
		int diff = n + 1 - count(cnt.begin(), cnt.end(), 0);
		cout &amp;lt;&amp;lt; max(min(mx - 1, diff), min(mx, diff - 1)) &amp;lt;&amp;lt; endl;
	}
	return 0;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;!-- raw HTML omitted --&gt;返回目录&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt;D. Anti-Sudoku&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;h4 id=&#34;题目-3&#34;&gt;题目：&lt;/h4&gt;
&lt;p&gt;You are given a correct solution of the sudoku puzzle.&lt;br&gt;
Blocks are bordered with bold black color.&lt;br&gt;
Your task is to change at most 9 elements of this field (i.e. choose some 1?i,j?9 and change the number at the position (i,j) to any other number in range [1;9]) to make it anti-sudoku. The anti-sudoku is the 9×9 field, in which:&lt;br&gt;
Any number in this field is in range [1;9];&lt;br&gt;
each row contains at least two equal elements;&lt;br&gt;
each column contains at least two equal elements;&lt;br&gt;
each 3×3 block (you can read what is the block in the link above) contains at least two equal elements.&lt;br&gt;
It is guaranteed that the answer exists.&lt;br&gt;
You have to answer t independent test cases.&lt;/p&gt;
&lt;h4 id=&#34;题意-3&#34;&gt;题意：&lt;/h4&gt;
&lt;p&gt;Well, if we replace all occurrences of the number 2 with the number 1, then the initial solution will be anti-sudoku. It is easy to see that this replacement will make exactly two copies of 1 in every row, column, and block. There are also other correct approaches but I found this one the most pretty.&lt;/p&gt;
&lt;h4 id=&#34;代码-3&#34;&gt;代码：&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
using namespace std;
int main() {
	int t;
	cin &amp;gt;&amp;gt; t;
	while (t--) {
		for (int i = 0; i &amp;lt; 9; ++i) {
			string s;
			cin &amp;gt;&amp;gt; s;
			for (auto &amp;amp;c : s) if (c == &#39;2&#39;) c = &#39;1&#39;;
			cout &amp;lt;&amp;lt; s &amp;lt;&amp;lt; endl;
		}
	}
	return 0;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;!-- raw HTML omitted --&gt;返回目录&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt;E. Three Blocks Palindrome&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;h4 id=&#34;题意-4&#34;&gt;题意：&lt;/h4&gt;
&lt;p&gt;The only difference between easy and hard versions is constraints.&lt;br&gt;
You are given a sequence a consisting of n positive integers.&lt;br&gt;
Let&amp;rsquo;s define a three blocks palindrome as the sequence, consisting of at most two distinct elements (let these elements are a and b, a can be equal b) and is as follows: [$\underbrace{a,a,…,a}&lt;em&gt;\text{x}$,$\underbrace{b,b,…,b}&lt;/em&gt;\text{y}$,$\underbrace{a,a,…,a}_\text{x}$]. There x,y are integers greater than or equal to 0. For example, sequences [], [2], [1,1], [1,2,1], [1,2,2,1] and [1,1,2,1,1] are three block palindromes but [1,2,3,2,1], [1,2,1,2,1] and [1,2] are not.&lt;br&gt;
Your task is to choose the maximum by length subsequence of a that is a three blocks palindrome.&lt;br&gt;
You have to answer t independent test cases.&lt;br&gt;
Recall that the sequence t is a a subsequence of the sequence s if t can be derived from s by removing zero or more elements without changing the order of the remaining elements. For example, if s=[1,2,1,3,1,2,1], then possible subsequences are: [1,1,1,1], [3] and [1,2,1,3,1,2,1], but not [3,2,3] and [1,1,1,1,2].&lt;/p&gt;
&lt;h4 id=&#34;代码-4&#34;&gt;代码：&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
using namespace std;
int main(){
    int t;cin&amp;gt;&amp;gt;t;
    while(t--){
        int n;cin&amp;gt;&amp;gt;n;
        vector&amp;lt;int&amp;gt; a(n,0);
        const int M = 200;
        vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt; pre(M,vi(n+1));
        vector&amp;lt;vi&amp;gt; at(M);
        for(int i = 0 ; i &amp;lt; n ; i++){
            cin &amp;gt;&amp;gt;a[i];
            --a[i];
            at[a[i]].push_back(i);
        }
        for(int i = 0 ; i &amp;lt; M ; i++){
            for(int j = 0 ; j &amp;lt; n ; j++){
                pre[i][j+1] = pre[i][j] + (a[j]==i);
            }
        }
        int ans = 0;
        for(int i = 0 ; i &amp;lt; M ; i++){
            int k = pre[i][n];
            ans = max(ans,k);
            for(int j = 1 ; 2*j &amp;lt;= k ; j++){
                int bi = at[i][j-1];
                int ed = at[i][k-j];
                for(int t = 0 ; t &amp;lt; M ; t++){
                    if(t!=i){
                        ans = max(ans,j*2 + pre[t][ed]-pre[t][bi]);
                    }
                }
            }
        }
        cout &amp;lt;&amp;lt; ans &amp;lt;&amp;lt; endl;
    }
    return 0;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;!-- raw HTML omitted --&gt;返回目录&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>leetcode第184场周赛</title>
      <link>https://wangwei9160.github.io/post/leetcode%E5%91%A8%E8%B5%9B184/</link>
      <pubDate>Sun, 12 Apr 2020 18:00:00 +0800</pubDate>
      
      <guid>https://wangwei9160.github.io/post/leetcode%E5%91%A8%E8%B5%9B184/</guid>
      
        <description>&lt;h1 id=&#34;leetcode第184场周赛&#34;&gt;leetcode第184场周赛&lt;/h1&gt;
&lt;h3 id=&#34;a-id0目录a&#34;&gt;&lt;!-- raw HTML omitted --&gt;目录&lt;!-- raw HTML omitted --&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;#a-id1%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8C%B9%E9%85%8Da&#34;&gt;数组中的字符串匹配&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;#a-id2-%E6%9F%A5%E8%AF%A2%E5%B8%A6%E9%94%AE%E7%9A%84%E6%8E%92%E5%88%97a&#34;&gt;查询带键的排列&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;#a-id3-html-%E5%AE%9E%E4%BD%93%E8%A7%A3%E6%9E%90%E5%99%A8a&#34;&gt;HTML 实体解析器&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;#a-id4%E7%BB%99-n-x-3-%E7%BD%91%E6%A0%BC%E5%9B%BE%E6%B6%82%E8%89%B2%E7%9A%84%E6%96%B9%E6%A1%88%E6%95%B0-a&#34;&gt;给 N x 3 网格图涂色的方案数&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;a-id1数组中的字符串匹配a&#34;&gt;&lt;!-- raw HTML omitted --&gt;数组中的字符串匹配&lt;!-- raw HTML omitted --&gt;&lt;/h4&gt;
&lt;h6 id=&#34;题目&#34;&gt;题目：&lt;/h6&gt;
&lt;blockquote&gt;
&lt;p&gt;给你一个字符串数组 words ，数组中的每个字符串都可以看作是一个单词。请你按 任意 顺序返回 words 中是其他单词的子字符串的所有单词。
如果你可以删除 words[j] 最左侧和/或最右侧的若干字符得到 word[i] ，那么字符串 words[i] 就是 words[j] 的一个子字符串。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h6 id=&#34;思路&#34;&gt;思路：&lt;/h6&gt;
&lt;blockquote&gt;
&lt;p&gt;利用find函数直接暴力匹配&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h6 id=&#34;代码&#34;&gt;代码：&lt;/h6&gt;
&lt;pre&gt;&lt;code&gt;vector&amp;lt;string&amp;gt; stringMatching(vector&amp;lt;string&amp;gt;&amp;amp; words) {
    vector&amp;lt;string&amp;gt; ans;
    for(auto x : words){
        for(auto y : words){
            if(x == y) continue;
            if(y.find(x) != -1 ){ans.push_back(x);break;}
        }
    }
    return ans;
}
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;a-id2-查询带键的排列a&#34;&gt;&lt;!-- raw HTML omitted --&gt; 查询带键的排列&lt;!-- raw HTML omitted --&gt;&lt;/h4&gt;
&lt;h6 id=&#34;题目-1&#34;&gt;题目：&lt;/h6&gt;
&lt;blockquote&gt;
&lt;p&gt;给你一个待查数组 queries ，数组中的元素为 1 到 m 之间的正整数。 请你根据以下规则处理所有待查项 queries[i]（从 i=0 到 i=queries.length-1）：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一开始，排列 P=[1,2,3,&amp;hellip;,m]。&lt;/li&gt;
&lt;li&gt;对于当前的 i ，请你找出待查项 queries[i] 在排列 P 中的位置（下标从 0 开始），然后将其从原位置移动到排列 P 的起始位置（即下标为 0 处）。注意， queries[i] 在 P 中的位置就是queries[i] 的查询结果。
请你以数组形式返回待查数组  queries 的查询结果。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h6 id=&#34;思路-1&#34;&gt;思路：&lt;/h6&gt;
&lt;blockquote&gt;
&lt;p&gt;模拟一遍就好了&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h6 id=&#34;代码-1&#34;&gt;代码：&lt;/h6&gt;
&lt;pre&gt;&lt;code&gt;vector&amp;lt;int&amp;gt; processQueries(vector&amp;lt;int&amp;gt;&amp;amp; queries, int m) {
    int mp[1002];
    for(int i = 0 ; i &amp;lt; m ; i++){
        mp[i] = i+1;
    }
    vector&amp;lt;int&amp;gt; ans;
    for(auto x : queries){
        if(mp[0] == x) {ans.push_back(0);continue;}
        int j = m-1;
        while( j &amp;gt; 0 &amp;amp;&amp;amp; mp[j] != x) {j--;}
        ans.push_back(j);
        for(int k = j ; k &amp;gt; 0 ; k--){
            mp[k] = mp[k-1];
        }
        mp[0] = x;
        
    }
    return ans;
}
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;a-id3-html-实体解析器a&#34;&gt;&lt;!-- raw HTML omitted --&gt; HTML 实体解析器&lt;!-- raw HTML omitted --&gt;&lt;/h4&gt;
&lt;h6 id=&#34;题目-2&#34;&gt;题目：&lt;/h6&gt;
&lt;blockquote&gt;
&lt;p&gt;「HTML 实体解析器」 是一种特殊的解析器，它将 HTML 代码作为输入，并用字符本身替换掉所有这些特殊的字符实体。
HTML 里这些特殊字符和它们对应的字符实体包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;双引号：字符实体为 &amp;quot; ，对应的字符是 &amp;quot; 。&lt;/li&gt;
&lt;li&gt;单引号：字符实体为 &#39; ，对应的字符是 &#39; 。&lt;/li&gt;
&lt;li&gt;与符号：字符实体为 &amp;amp; ，对应对的字符是 &amp;amp; 。&lt;/li&gt;
&lt;li&gt;大于号：字符实体为 &amp;gt; ，对应的字符是 &amp;gt; 。&lt;/li&gt;
&lt;li&gt;小于号：字符实体为 &amp;lt; ，对应的字符是 &amp;lt; 。&lt;/li&gt;
&lt;li&gt;斜线号：字符实体为 ⁄ ，对应的字符是 / 。
给你输入字符串 text ，请你实现一个 HTML 实体解析器，返回解析器解析后的结果。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h6 id=&#34;思路-2&#34;&gt;思路：&lt;/h6&gt;
&lt;blockquote&gt;
&lt;p&gt;利用replace函数&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h6 id=&#34;代码-2&#34;&gt;代码：&lt;/h6&gt;
&lt;pre&gt;&lt;code&gt;def entityParser(self, text: str) -&amp;gt; str:
    text = text.replace(&#39;&amp;amp;quot;&#39;,&#39;&amp;quot;&#39;)
    text = text.replace(&#39;&amp;amp;apos;&#39;,&#39;\&#39;&#39;)
    text = text.replace(&#39;&amp;amp;amp;&#39;,&#39;&amp;amp;&#39;)
    text = text.replace(&#39;&amp;amp;gt;&#39;,&#39;&amp;gt;&#39;)
    text = text.replace(&#39;&amp;amp;lt;&#39;,&#39;&amp;lt;&#39;)
    text = text.replace(&#39;&amp;amp;frasl;&#39;,&#39;/&#39;)
    return text
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;a-id4给-n-x-3-网格图涂色的方案数-a&#34;&gt;&lt;!-- raw HTML omitted --&gt;给 N x 3 网格图涂色的方案数 &lt;!-- raw HTML omitted --&gt;&lt;/h4&gt;
&lt;h6 id=&#34;题目-3&#34;&gt;题目：&lt;/h6&gt;
&lt;blockquote&gt;
&lt;p&gt;你有一个 n x 3 的网格图 grid ，你需要用 红，黄，绿 三种颜色之一给每一个格子上色，且确保相邻格子颜色不同（也就是有相同水平边或者垂直边的格子颜色不同）。
给你网格图的行数 n 。
请你返回给 grid 涂色的方案数。由于答案可能会非常大，请你返回答案对 10^9 + 7 取余的结果。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h6 id=&#34;思路-3&#34;&gt;思路：&lt;/h6&gt;
&lt;blockquote&gt;
&lt;p&gt;初始化第一行的所有状态
接下来计算每一行的所有状态的出现的次数
条件（相同水平边或者垂直边的格子颜色不同）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h6 id=&#34;代码-3&#34;&gt;代码:&lt;/h6&gt;
&lt;pre&gt;&lt;code&gt;long long dp[5002][3][3][3];
const int mod = 1e9+7;
int numOfWays(int n) {
    for(int i=0;i&amp;lt;3;i++)for(int j=0;j&amp;lt;3;j++)for(int k=0;k&amp;lt;3;k++)if(i!=j&amp;amp;&amp;amp;j!=k) dp[1][i][j][k]=1;
    for(int p=2;p&amp;lt;=n;p++){
        for(int i=0;i&amp;lt;3;i++)
            for(int j=0;j&amp;lt;3;j++)
                for(int k=0;k&amp;lt;3;k++)
                    for(int ii=0;ii&amp;lt;3;ii++)
                        for(int jj=0;jj&amp;lt;3;jj++)
                            for(int kk=0;kk&amp;lt;3;kk++)
                                if(i!=j&amp;amp;&amp;amp;j!=k&amp;amp;&amp;amp;ii!=i&amp;amp;&amp;amp;jj!=j&amp;amp;&amp;amp;kk!=k) 
                                    (dp[p][i][j][k] += dp[p-1][ii][jj][kk]) %= mod;
    }
    long long ans =0;
    for(int i=0;i&amp;lt;3;i++)for(int j=0;j&amp;lt;3;j++)for(int k=0;k&amp;lt;3;k++)if(i!=j&amp;amp;&amp;amp;j!=k) ans+=dp[n][i][j][k];
    ans%=mod;
    return ans;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;a href=&#34;#a-id0%E7%9B%AE%E5%BD%95a&#34;&gt;回到目录&lt;/a&gt;&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>Min_max</title>
      <link>https://wangwei9160.github.io/post/min_max/</link>
      <pubDate>Thu, 09 Apr 2020 21:22:44 +0800</pubDate>
      
      <guid>https://wangwei9160.github.io/post/min_max/</guid>
      
        <description></description>
      
    </item>
    
    <item>
      <title>New_test</title>
      <link>https://wangwei9160.github.io/post/new_test/</link>
      <pubDate>Wed, 08 Apr 2020 21:59:56 +0800</pubDate>
      
      <guid>https://wangwei9160.github.io/post/new_test/</guid>
      
        <description>&lt;p&gt;这里是一篇最新的测试文章！&lt;/p&gt;
&lt;p&gt;重新测试！&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>Blog</title>
      <link>https://wangwei9160.github.io/post/blog/</link>
      <pubDate>Wed, 08 Apr 2020 17:25:04 +0800</pubDate>
      
      <guid>https://wangwei9160.github.io/post/blog/</guid>
      
        <description>&lt;p&gt;Hello world!&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>markdown</title>
      <link>https://wangwei9160.github.io/post/markdown/</link>
      <pubDate>Wed, 08 Apr 2020 17:25:04 +0800</pubDate>
      
      <guid>https://wangwei9160.github.io/post/markdown/</guid>
      
        <description>&lt;h1 id=&#34;一级标题&#34;&gt;一级标题&lt;/h1&gt;
&lt;h2 id=&#34;二级标题&#34;&gt;二级标题&lt;/h2&gt;
&lt;h3 id=&#34;三级标题&#34;&gt;三级标题&lt;/h3&gt;
&lt;h4 id=&#34;四级标题&#34;&gt;四级标题&lt;/h4&gt;
&lt;h5 id=&#34;五级标题&#34;&gt;五级标题&lt;/h5&gt;
&lt;h6 id=&#34;六级标题&#34;&gt;六级标题&lt;/h6&gt;
&lt;h1 id=&#34;我是一级标题&#34;&gt;我是一级标题&lt;/h1&gt;
&lt;h2 id=&#34;我是二级标题&#34;&gt;我是二级标题&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;代码&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;import 
&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;4个空格代码块
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;有序列表&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;123&lt;/li&gt;
&lt;li&gt;345&lt;/li&gt;
&lt;li&gt;123&lt;br&gt;
1.234&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;无序列表&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;123
&lt;ul&gt;
&lt;li&gt;234&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;456
&lt;ul&gt;
&lt;li&gt;98&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;倾斜的字&lt;/em&gt;&lt;br&gt;
&lt;strong&gt;加粗的字&lt;/strong&gt;&lt;br&gt;
正常的字&lt;br&gt;
&lt;em&gt;斜的字&lt;/em&gt;&lt;br&gt;
&lt;del&gt;被删除的字&lt;/del&gt;&lt;br&gt;
&lt;em&gt;&lt;strong&gt;粗斜的字&lt;/strong&gt;&lt;/em&gt;&lt;br&gt;
&lt;!-- raw HTML omitted --&gt;下划线&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;分割线&lt;/p&gt;
&lt;hr&gt;
&lt;hr&gt;
&lt;hr&gt;
&lt;hr&gt;
&lt;hr&gt;
&lt;p&gt;创建脚注格式类似这样 &lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;区块&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;第二层&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;第三层&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;第一项
&lt;blockquote&gt;
&lt;p&gt;区块1&lt;br&gt;
区块2&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;第二项&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&#34;https://www.baidu.com&#34;&gt;百度&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.baidu.com&#34;&gt;https://www.baidu.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.baidu.com/img/baidu_jgylogo3.gif&#34; alt=&#34;图片&#34; title=&#34;百度&#34;&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;表头很长的&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;表头很长的&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;表头很长的&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;单元格&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;单元格&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;单元格&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;单元格&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;单元格&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;单元格&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;使用 &lt;!-- raw HTML omitted --&gt;Ctrl&lt;!-- raw HTML omitted --&gt;+&lt;!-- raw HTML omitted --&gt;Alt&lt;!-- raw HTML omitted --&gt;+&lt;!-- raw HTML omitted --&gt;Del&lt;!-- raw HTML omitted --&gt; 重启电脑&lt;/p&gt;
&lt;p&gt;\   反斜线
`   反引号&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;星号
_   下划线
{}  花括号
[]  方括号
()  小括号&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;井字号&#34;&gt;井字号&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;加号&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;减号
.   英文句点
!   感叹号&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;git&#34;&gt;Git&lt;/h1&gt;
&lt;pre&gt;&lt;code&gt;hugo --theme= --baseUrl=&amp;quot;name.github.io&amp;quot; --buildDrafts
cd public
git add .
git commit -m &amp;quot;&amp;quot;
git push -u origin master
&lt;/code&gt;&lt;/pre&gt;&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;这里是脚注1的内容。 &lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description>
      
    </item>
    
  </channel>
</rss>
